"use client";
//Generated by GeneratePageFile
import Link from "next/link";
import React, { MouseEventHandler } from "react";
import {
  Formik,
  Field,
  ErrorMessage,
  FormikProps,
  FormikHelpers,
  Form,
} from "formik";
import registrationSchema from "@/schema/registration";
import {
  QueryClient,
  QueryClientProvider,
  useMutation,
} from "@tanstack/react-query";
import { Button } from "@/components/ui/Button";
import { Input } from "@/components/ui/Input";
import { Label } from "@/components/ui/Label";
import { Alert, AlertDescription } from "@/components/ui/Alert";
import { AlertCircle } from "lucide-react";
import { toast } from "@/hooks/use-toast";
import { supabase } from "@/lib/supabase/supabase";
import axiosClient from "@/utils/api";

// Create a QueryClient instance
const queryClient = new QueryClient();

//@ts-ignore
const Register: React.FC = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <RegisterForm />
    </QueryClientProvider>
  );
};

const RegisterForm: React.FC = () => {
  const initialValues = {
    email: "jet_pradas@yahoo.com",
    password: "Jetpogi_21",
    passwordConfirmation: "Jetpogi_21",
  };

  const registerUser = async (values: typeof initialValues) => {
    const { email, password, passwordConfirmation } = values;
    let { data } = await axiosClient.post("/register", {
      email,
      password,
      passwordConfirmation,
    });

    return data;
  };

  const { isPending: isLoading, mutateAsync } = useMutation({
    mutationFn: registerUser,
  });

  const handleSubmit = async (
    values: typeof initialValues,
    {
      setSubmitting,
      setFieldError,
      setStatus,
    }: FormikHelpers<typeof initialValues>
  ) => {
    //Use useMutation here from tanstack-query
    try {
      const data = await mutateAsync(values);

      if (data.status === "success") {
        toast({
          description: "We sent an email to the address you provided.",
          variant: "success",
        });
      } else {
        toast({
          description: data.error,
          variant: "destructive",
        });
      }
    } catch (e: any) {
      toast({
        description: e.response.data,
        variant: "destructive",
      });
    }

    setSubmitting(false);
  };

  return (
    <div className="flex flex-col items-center flex-1 w-full max-w-[500px] mx-auto">
      <h1 className="my-5 text-5xl ">Sign Up</h1>
      <Formik
        initialValues={initialValues}
        validationSchema={registrationSchema}
        onSubmit={handleSubmit}
        validateOnChange={false}
        enableReinitialize={true}
      >
        {({
          isSubmitting,
          submitForm,
          errors,
          status,
        }: FormikProps<typeof initialValues>) => {
          const handleSubmitClick: MouseEventHandler = (e) => {
            e.preventDefault();
            submitForm();
          };

          return (
            <Form
              className="flex flex-col gap-4 w-full px-4 md:w-[400px]"
              autoComplete="off"
              noValidate
            >
              {status && (
                <Alert variant="destructive">
                  <AlertCircle className="w-4 h-4" />
                  <AlertDescription>{status}</AlertDescription>
                </Alert>
              )}
              <div className="flex flex-col gap-2">
                <Label
                  htmlFor="email"
                  className="pl-2 text-base"
                >
                  Email address
                </Label>
                <Field
                  type="email"
                  name="email"
                  placeholder="email address"
                  as={Input}
                  required
                />
                <ErrorMessage
                  name="email"
                  component="div"
                  className="pl-2 text-xs text-red-500"
                />
              </div>
              <div className="flex flex-col gap-2">
                <Label
                  htmlFor="password"
                  className="pl-2 text-base"
                >
                  Password
                </Label>
                <Field
                  type="password"
                  name="password"
                  placeholder="password"
                  as={Input}
                  required
                />
                <ErrorMessage
                  name="password"
                  component="div"
                  className="pl-2 text-xs text-red-500"
                />
              </div>
              <div className="flex flex-col gap-2">
                <Label
                  htmlFor="passwordConfirmation"
                  className="pl-2 text-base"
                >
                  Confirm Password
                </Label>
                <Field
                  type="password"
                  name="passwordConfirmation"
                  placeholder="Confirm Password"
                  as={Input}
                  required
                />
                <ErrorMessage
                  name="passwordConfirmation"
                  component="div"
                  className="pl-2 text-xs text-red-500"
                />
              </div>
              <Button
                type="button"
                variant="secondary"
                disabled={isSubmitting || isLoading}
                isLoading={isSubmitting || isLoading}
                onClick={handleSubmitClick}
              >
                Register
              </Button>
              <span className="text-sm text-center">
                Already have an account?{" "}
                <Link
                  href="/login"
                  className="underline underline-offset-4"
                >
                  Login here
                </Link>
              </span>
            </Form>
          );
        }}
      </Formik>
    </div>
  );
};

export default Register;
