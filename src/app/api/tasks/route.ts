//Generated by WriteToModelsRoutes_tsUsingModelconfig - models routes.ts supabase
import { parseParams } from "@/utils/utils";
import { TaskSearchParams } from "@/interfaces/TaskInterfaces";
import { NextResponse } from "next/server";
import { getCursorString, getSortedValueSimplified } from "@/utils/api/utils";
import { TaskConfig } from "@/utils/config/TaskConfig";
import { findConfigItem, findModelPrimaryKeyField } from "@/utils/utilities";
import { getMainModelURL } from "@/utils/api/getMainModelURL";
import handleSequelizeError from "@/utils/errorHandling";
import { createSupabaseRoute } from "@/lib/supabase/supabase";
import { cookies } from "next/headers";

const modelConfig = TaskConfig;
const primaryKey = findModelPrimaryKeyField(modelConfig).databaseFieldName;

export const GET = async (req: Request) => {
  const searchParams = new URL(req.url).searchParams;
  const query = parseParams(searchParams) as Partial<TaskSearchParams>;

  const cookieStore = cookies();
  const supabase = createSupabaseRoute(cookieStore);

  const fetchCount = query["fetchCount"] === "true";
  const sort = getSortedValueSimplified(query["sort"], modelConfig);
  const sortField = sort.includes("-") ? sort.substring(1) : sort;

  const cursorField = findConfigItem(
    modelConfig.fields,
    "databaseFieldName",
    sortField,
    "fieldName"
  );

  const supQuery = getMainModelURL(query, false, modelConfig, supabase);

  try {
    const { data, error, count } = await supQuery;

    let cursor = "";

    if (data && data.length > 0) {
      cursor = getCursorString(cursorField, primaryKey, data);
    }

    if (error) {
      return NextResponse.json({
        rows: [],
        status: "error",
        error: error.message,
      });
    }

    return NextResponse.json({
      rows: data,
      cursor,
      ...(fetchCount && { count }),
    });
  } catch (e) {
    return handleSequelizeError(e);
  }
};

//TO DO: POST route
/* export const POST = async (req: Request) => {
  const res = await req.json();

  try {
    await ModelSchema(modelConfig).validate(res);
  } catch (error) {
    return handleSequelizeError(error);
  }

  const t = await sequelize.transaction();

  try {
    const newParentRecord = await createModel(modelConfig, res, t);
    const parentPrimaryKeyField = findModelPrimaryKeyField(modelConfig);
    const newParentID: number | string =
      //@ts-ignore
      newParentRecord[parentPrimaryKeyField.fieldName];

    const newRecords: Record<string, unknown> = {};

    await createNewRecordsForModelAndSimpleRelationships(
      modelConfig,
      newParentID,
      res,
      t,
      newRecords
    );

    await updateOrCreateRelatedRecords(
      modelConfig,
      res,
      newParentID,
      t,
      newRecords
    );

    await t.commit();

    return NextResponse.json({
      status: "success",
      [parentPrimaryKeyField.fieldName]: newParentID,
      ...newRecords,
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
}; */

//TO DO: DELETE route
/* export const DELETE = async (req: Request) => {
  const body = (await req.json()) as TaskIntervalDeletePayload;
  const { deletedTaskIntervals } = body;

  if (deletedTaskIntervals.length > 0) {
    const t = await sequelize.transaction();
    try {
      await deleteModels(modelConfig, deletedTaskIntervals, t);
      t.commit();
      return NextResponse.json("success");
    } catch (error) {
      t.rollback();
      return handleSequelizeError(error);
    }
  }
}; */
