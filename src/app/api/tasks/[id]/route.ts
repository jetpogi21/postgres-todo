//Generated by WriteToModelRoute_tsUsingModelconfig - model route.ts using modelConfig
import handleSequelizeError from "@/utils/errorHandling";
import { NextResponse } from "next/server";
import { TaskConfig } from "@/utils/config/TaskConfig";
import { cookies } from "next/headers";
import { createSupabaseRoute } from "@/lib/supabase/supabase";
import { getMainModelURL } from "@/utils/api/getMainModelURL";

const modelConfig = TaskConfig;

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //This can be a slug or id
  const id = params.id;

  const cookieStore = cookies();
  const supabase = createSupabaseRoute(cookieStore);

  const supQuery = getMainModelURL({}, true, modelConfig, supabase, {
    primaryKeyValue: id,
    useSlug: !!modelConfig.slugField,
  });

  try {
    const { data, error } = await supQuery.single();

    if (error) {
      return NextResponse.json({
        rows: [],
        status: "error",
        error: error.message,
      });
    }

    return NextResponse.json(data);
  } catch (e) {
    return handleSequelizeError(e);
  }
};

/* export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const res = await req.json();
  const id = params.id;

  try {
    await ModelSchema(modelConfig).validate(res);
  } catch (error: any) {
    return returnJSONResponse({
      status: "error",
      errorCode: 401,
      error: error.message,
    });
  }

  const t = await sequelize.transaction();

  try {
    await updateModel(modelConfig, res, id, t);

    const newRecords: Record<string, unknown> = {};

    await updateOrCreateRelatedRecords(modelConfig, res, id, t, newRecords);

    await createNewRecordsForModelAndSimpleRelationships(
      modelConfig,
      id,
      res,
      t,
      newRecords
    );

    await deleteRelatedSimpleModels(modelConfig, res, t);

    t.commit();
    return NextResponse.json({
      status: "success",
      ...newRecords,
    });
  } catch (err) {
    t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const id = params.id;
  const t = await sequelize.transaction();
  try {
    deleteModels(modelConfig, [id], t);
    t.commit();

    return NextResponse.json({ status: "success" });
  } catch (err) {
    t.rollback();
    return handleSequelizeError(err);
  }
}; */
