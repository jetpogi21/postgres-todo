//Generated by WriteToMultiRoute_ts - multi route.ts
/* import sequelize from "@/config/db"; */
import { AppConfig } from "@/lib/app-config";
import { ModelSchema } from "@/schema/ModelSchema";
import { axiosServerClient } from "@/utils/api";
import { getCreateJSON } from "@/utils/api/ModelLibs";
/* import { createModel, updateModel } from "@/utils/api/ModelLibs"; */
import { TaskCategoryConfig } from "@/utils/config/TaskCategoryConfig";
import handleSequelizeError from "@/utils/errorHandling";
import { findModelPrimaryKeyField } from "@/utils/utilities";
import { NextResponse } from "next/server";

const modelConfig = TaskCategoryConfig;
const primaryKeyField = findModelPrimaryKeyField(modelConfig).fieldName;
//Generated by GetMultiCreateModelPOSTRoute - GetMultiCreateModelPOSTRoute
export const POST = async (req: Request) => {
  const authorization = req.headers.get("Authorization");

  console.log(authorization);

  const body = await req.json();

  /* const t = await sequelize.transaction(); */
  let recordsCreated = 0;

  const rows = body[modelConfig.pluralizedModelName];
  const recordRows = [];
  const rowFields = Object.keys(rows).map((item) => item);

  for (const item of rows) {
    try {
      //Validate only the submitted fields
      await ModelSchema(modelConfig, false, rowFields).validate(item);
    } catch (error) {
      return handleSequelizeError(error);
    }
  }

  try {
    for (const item of rows) {
      const primaryKeyValue = item[primaryKeyField];
      if (primaryKeyValue === "") {
        const recordRow = getCreateJSON(modelConfig, item);
        recordRows.push(recordRow);
        /* await createModel(modelConfig, item, t); */
        recordsCreated++;
      } else {
        const recordRow = getCreateJSON(modelConfig, item);
        recordRows.push({
          ...recordRow,
          [primaryKeyField]: item[primaryKeyField],
        });
        /* await updateModel(modelConfig, item, primaryKeyValue, t); */
      }
    }

    const functionPayload = {
      table: `${AppConfig.sanitizedAppName}.${modelConfig.tableName}`,
      primaryKey: primaryKeyField,
      rows: recordRows,
    };

    console.log(functionPayload);

    const response = await axiosServerClient.post(
      "/rpc/process_json",
      functionPayload,
      {
        headers: {
          Authorization: authorization,
          prefer: "params=single-object",
        },
      }
    );

    /* await t.commit(); */
    //{ table: { primaryKey: "", rows: []}}

    return NextResponse.json({
      recordsCreated,
      data: response.data,
    });
  } catch (err) {
    /* await t.rollback(); */
    return handleSequelizeError(err);
  }
};
