//Generated by WriteToModelsRoutes_tsUsingModelconfig - models routes.ts using modelConfig
import { parseParams } from "@/utils/utils";
import { TaskCategorySearchParams } from "@/interfaces/TaskCategoryInterfaces";
import { NextResponse } from "next/server";
import { getCursorString, getSortedValueSimplified } from "@/utils/api/utils";
import { TaskCategoryConfig } from "@/utils/config/TaskCategoryConfig";
import { findConfigItem, findModelPrimaryKeyField } from "@/utils/utilities";
import { axiosServerClient } from "@/utils/api";
import { getMainModelURL } from "@/utils/api/getMainModelURL";
import handleSequelizeError from "@/utils/errorHandling";
import { extractTextAfterSlash } from "@/lib/extractTextAfterSlash";
import { ModelSchema } from "@/schema/ModelSchema";
import { getCreateJSON } from "@/utils/api/ModelLibs";
import { getRelatedSimpleModelJSON } from "@/lib/getRelatedSimpleModelJSON";
import { getRelatedModelJSON } from "@/lib/getRelatedModelJSON";

const modelConfig = TaskCategoryConfig;
const primaryKey = findModelPrimaryKeyField(modelConfig).databaseFieldName;

export const GET = async (req: Request) => {
  const searchParams = new URL(req.url).searchParams;
  const query = parseParams(searchParams) as Partial<TaskCategorySearchParams>;

  const authorization = req.headers.get("Authorization");

  const fetchCount = query["fetchCount"] === "true";
  const sort = getSortedValueSimplified(query["sort"], modelConfig);
  const sortField = sort.includes("-") ? sort.substring(1) : sort;

  const cursorField = findConfigItem(
    modelConfig.fields,
    "databaseFieldName",
    sortField,
    "fieldName"
  );

  let { rowURL, countURL } = getMainModelURL(query, false, modelConfig);

  let recordCount = 0;
  if (fetchCount) {
    try {
      const response = await axiosServerClient.head(countURL, {
        headers: {
          prefer: "count=exact",
          Authorization: authorization,
        },
      });

      const { headers } = response;

      const contentRange = headers["content-range"];
      recordCount = extractTextAfterSlash(contentRange);
    } catch (e) {
      return handleSequelizeError(e);
    }
  }

  //Issue a supabase query
  try {
    const response = await axiosServerClient.get(rowURL, {
      headers: {
        Authorization: authorization,
      },
    });

    const { data } = response;

    let cursor = "";

    if (data && data.length > 0) {
      cursor = getCursorString(cursorField, primaryKey, data);
    }

    return NextResponse.json({
      rows: data,
      cursor,
      ...(fetchCount && { count: recordCount }),
    });
  } catch (e) {
    return handleSequelizeError(e);
  }
};

export const POST = async (req: Request) => {
  const res = await req.json();

  try {
    await ModelSchema(modelConfig).validate(res);
  } catch (error) {
    return handleSequelizeError(error);
  }
  try {
    const newParentRecord = getCreateJSON(modelConfig, res);
    const parentPrimaryKeyField = findModelPrimaryKeyField(modelConfig);
    const newRecords: Record<string, unknown> = {};

    getRelatedSimpleModelJSON(modelConfig, res, newRecords);

    getRelatedModelJSON(modelConfig, res, newRecords);

    return NextResponse.json({
      status: "success",
      newRecords,
    });
  } catch (err) {
    return handleSequelizeError(err);
  }
};
