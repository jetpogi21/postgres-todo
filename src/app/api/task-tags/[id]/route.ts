//Generated by WriteToModelRoute_tsUsingModelconfig - model route supabase
import handleSequelizeError from "@/utils/errorHandling";
import { NextResponse } from "next/server";
import { TaskTagConfig } from "@/utils/config/TaskTagConfig";
import { cookies } from "next/headers";
import { createSupabaseRoute } from "@/lib/supabase/supabase";
import { getMainModelURL } from "@/utils/api/getMainModelURL";
import { ModelSchema } from "@/schema/ModelSchema";
import { getInsertSQL, getUpdateSQL } from "@/utils/api/ModelLibs";
import { ChildSQL } from "@/interfaces/interface";
import { getNewRecordsForRelationships } from "@/lib/getNewRecordsForRelationships";
import { getNewRecordsForSimpleRelationships } from "@/lib/getNewRecordsForSimpleRelationships";
import { getRelatedSQLs } from "@/lib/getRelatedSQLs";
import { getRelatedSimpleSQLs } from "@/lib/getRelatedSimpleSQLs";
import { findModelPrimaryKeyField } from "@/utils/utilities";
import { returnJSONResponse } from "@/utils/utils";

const modelConfig = TaskTagConfig;

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //This can be a slug or id
  const id = params.id;

  const cookieStore = cookies();
  const supabase = createSupabaseRoute(cookieStore);

  const supQuery = getMainModelURL({}, true, modelConfig, supabase, {
    primaryKeyValue: id,
    useSlug: !!modelConfig.slugField,
  });

  try {
    const { data, error } = await supQuery.single();

    if (error) {
      return NextResponse.json({
        rows: [],
        status: "error",
        error: error.message,
      });
    }

    return NextResponse.json(data);
  } catch (e) {
    return handleSequelizeError(e);
  }
};

export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const cookieStore = cookies();
  const supabase = createSupabaseRoute(cookieStore);

  const body = await req.json();

  try {
    await ModelSchema(modelConfig).validate(body);
  } catch (error) {
    return handleSequelizeError(error);
  }

  //Create statement here
  const mainSQL = getUpdateSQL(modelConfig, body, {
    returnPKOnly: true,
    pkValue: params.id,
  });

  let childSQL: ChildSQL = {};

  const simpleSQLs = getRelatedSimpleSQLs(modelConfig, body);

  childSQL = { ...childSQL, ...simpleSQLs };

  const relatedSQLs = await getRelatedSQLs(modelConfig, body);

  childSQL = { ...childSQL, ...relatedSQLs };

  const { data, error } = await supabase.rpc("upsert_with_children", {
    main: mainSQL,
    children: childSQL,
  });

  if (error) {
    return returnJSONResponse({
      status: "error",
      error: error.message,
      errorCode: 404,
    });
  }

  const parentPrimaryKeyField =
    findModelPrimaryKeyField(modelConfig).databaseFieldName;

  let newRecords = {};
  newRecords = {
    newRecords,
    ...getNewRecordsForSimpleRelationships(modelConfig, data),
    ...getNewRecordsForRelationships(modelConfig, data),
  };

  return NextResponse.json({
    status: "success",
    [parentPrimaryKeyField]: data["id"],
    ...newRecords,
  });
};
