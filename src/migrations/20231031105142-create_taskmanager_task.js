//Generated by CreateSequelizeModelCreateMigration - sequelize create model migration
"use strict";

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable("taskmanager_task", 
      //Generated by GenerateFieldsForModelMigration
//Generated by GetModelFieldsDictionary
{
 id: {
  type: Sequelize.BIGINT,
  autoIncrement: true,
  primaryKey: true,
  field: "id"
 }
 ,
 description: {
  type: Sequelize.STRING(50),
  field: "description"
 }
 ,
 taskCategoryID: {
  type: Sequelize.BIGINT,
  field: "task_category_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "taskmanager_taskcategory",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "CASCADE"
 },
 taskIntervalID: {
  type: Sequelize.BIGINT,
  field: "task_interval_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "taskmanager_taskinterval",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "CASCADE"
 },
 taskTemplateID: {
  type: Sequelize.BIGINT,
  allowNull: true,
  field: "task_template_id"
 }
 ,
 date: {
  type: Sequelize.DATEONLY,
  field: "date"
 }
 ,
 targetDate: {
  type: Sequelize.DATEONLY,
  field: "target_date"
 }
 ,
 finishDateTime: {
  type: Sequelize.DATE,
  allowNull: true,
  field: "finish_date_time"
 }
 ,
 isFinished: {
  type: Sequelize.BOOLEAN,
  defaultValue: false,
  field: "is_finished"
 }
 ,
 subTaskImported: {
  type: Sequelize.BOOLEAN,
  defaultValue: false,
  field: "sub_task_imported"
 }
}
,
      {
        
      }
    );
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable("taskmanager_task");
  },
};
